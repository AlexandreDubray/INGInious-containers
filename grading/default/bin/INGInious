#! /usr/bin/python
import json
import sys
import shutil
import os
import os.path
import stat
import resource
import subprocess
import inginious.tests
import inginious.feedback
import time
import tempfile
import tarfile
import base64

def copytree(src, dst, symlinks=False, ignore=None):
    """ Custom copy tree to allow to copy into existing directories """
    for item in os.listdir(src):
        s = os.path.join(src, item)
        d = os.path.join(dst, item)
        if os.path.isdir(s):
            shutil.copytree(s, d, symlinks, ignore)
        else:
            shutil.copy2(s, d)

def setDirectoryRights(path):
    os.chmod(path, 0o777)
    os.chown(path, 4242, 4242)
    for root, dirs, files in os.walk(path):  
        for d in dirs:
            os.chmod(os.path.join(root, d), 0o777)
            os.chown(os.path.join(root, d), 4242, 4242)
        for f in files:
            os.chmod(os.path.join(root, f), 0o777)
            os.chown(os.path.join(root, f), 4242, 4242)
            
def setlimits():
    os.setgid(4242)
    os.setuid(4242)
    resource.setrlimit(resource.RLIMIT_NPROC, (1000, 1000))
    
def setExecutable(filename):
    st = os.stat(filename)
    os.chmod(filename, st.st_mode | stat.S_IEXEC)

def executeProcess(args,stdinString="",as_root=False):
    if not isinstance(args, list):
        args = [args]
    stdin = tempfile.TemporaryFile()
    stdin.write(stdinString)
    stdin.seek(0)
    
    stdout = tempfile.TemporaryFile()
    stderr = tempfile.TemporaryFile()
    if as_root:
        p = subprocess.Popen(args, stdin=stdin, stdout=stdout, stderr=stderr)
    else:
        setExecutable(args[0])
        p = subprocess.Popen(args, preexec_fn=setlimits, stdin=stdin, stdout=stdout, stderr=stderr)
    while p.poll() is None:
        time.sleep(0.2)
    stdout.seek(0)
    stderr.seek(0)
    return stdout.read(), stderr.read()

def b64tarfile(source_dir):
    with tarfile.open('/.__output/archive.tgz', "w:gz") as tar:
        tar.add(source_dir, arcname='/')
        
    with open('/.__output/archive.tgz', "rb") as tar:
        encoded_string = base64.b64encode(tar.read())
        
    return encoded_string

# Get input data
stdin = sys.stdin.read().strip('\0').strip()
data = json.loads(stdin)
input_data = data["input"]
limits = data["limits"]

# Determining if debug mode or not
debug = (sys.argv[1:] and sys.argv[1] == '--debug') or data.get("debug",False)

# Create input data directory
if not os.path.exists("/.__input"):
    os.mkdir("/.__input")
f = open('/.__input/__inputdata.json', 'w')
f.write(stdin)
f.close()

# Create tests directory
if not os.path.exists("/.__tests"):
    os.mkdir('/.__tests')

# Create output directory
if not os.path.exists("/.__output"):
    os.mkdir("/.__output")

# Touch __feedback.json (to set the rights)
open('/.__output/__feedback.json', 'w').close()

# Verify that task directory exists
if not os.path.exists("/task"):
    os.mkdir("/task")

# Assert that the directory .ssh does not exists
if os.path.exists("/task/.ssh"):
    shutil.rmtree("/task/.ssh")

#Set rights on some files
setDirectoryRights("/tmp")
setDirectoryRights("/task")
setDirectoryRights("/.__input")
setDirectoryRights("/.__tests")
setDirectoryRights("/.__output")

#Launch everything
stdout, stderr = "", ""
if debug != "ssh": #normal start
    if os.path.exists("/task/run"):
        os.chdir("/task")
        try:
            stdout, stderr = executeProcess("/task/run")
        except:
            inginious.feedback.set_result('crash')
            inginious.feedback.set_global_feedback("An error occured while running the grading script. It is possible that it is non-executable or made a timeout")
    else:
        inginious.feedback.set_result('crash')
        inginious.feedback.set_global_feedback("'/task/run' could not be found")
else: #start the ssh server
    os.mkdir("/task/.ssh")
    executeProcess(["/usr/bin/ssh-keygen", "-t", "rsa", "-b", "1024", "-N", '', "-f", "/task/.ssh/id_rsa"], as_root=True)

    # Do the chmod after to avoid race conditions between the GC of python (closing the file opened by chmod) and Linux.
    os.chown("/task/.ssh", 4242, 4242)
    os.chown("/task/.ssh/id_rsa", 4242, 4242)
    os.chown("/task/.ssh/id_rsa.pub", 4242, 4242)

    executeProcess(["/usr/bin/ssh-keygen", "-A"], as_root=True)
    executeProcess(["/usr/sbin/sshd", "-p", "22", "-o", "AuthorizedKeysFile=.ssh/id_rsa.pub", "-o", "PermitRootLogin=no", "-o",
                    "PasswordAuthentication=no", "-o", "StrictModes=no"], as_root=True)
    with open('/task/.ssh/id_rsa') as private_key:
        print json.dumps({"ssh_key": private_key.read()})
        sys.stdout.flush()  # force flush to ensure the agent gets it

    # Set defaults
    inginious.feedback.set_result('crash')
    inginious.feedback.set_global_feedback("[SSH Debug] Not feedback was set")

    # Wait until someone connects to the server
    connected_workers = 0
    attempts = 0
    while connected_workers == 0 and attempts < 120:
        time.sleep(1)
        stdout, stderr = executeProcess(["/bin/bash", "-c", "ps -f -C sshd | grep 'worker@pts' | wc -l"], as_root=True)
        connected_workers = int(stdout)
        attempts += 1

    # If someone is connected, wait until no one remains
    if connected_workers != 0:
        attempts = 0
        while connected_workers != 0 and attempts < 60*30:
            time.sleep(1)
            stdout, stderr = executeProcess(["/bin/bash", "-c", "ps -f -C sshd | grep 'worker@pts' | wc -l"], as_root=True)
            connected_workers = int(stdout)
            attempts += 1
    else:
        inginious.feedback.set_result('crash')
        inginious.feedback.set_global_feedback('[SSH Debug] Nobody connected to the SSH server.')

    stdout, stderr = "", ""

# Produce feedback
feedback = inginious.feedback.get_feedback()
tests_results = inginious.tests.get_tests_results()
if not feedback:
    result = {"result":"crash", "text":"No feedback was given !", "problems":{}}
    if debug:
        result['stdout'] = stdout.decode('utf-8', 'replace')
        result['stderr'] = stderr.decode('utf-8', 'replace')
        result['tests'] = tests_results
    print json.dumps(result)
else:
    if debug:
        feedback['stdout'] = stdout.decode('utf-8', 'replace')
        feedback['stderr'] = stderr.decode('utf-8', 'replace')
        feedback['tests'] = tests_results
    feedback['archive'] = b64tarfile('/.__output')
    print json.dumps(feedback)
setDirectoryRights('/task')
