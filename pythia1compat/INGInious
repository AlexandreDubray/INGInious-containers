#! /usr/bin/python
import base64
from inginious import feedback
from inginious import tests
import inginious
import json
import os
from os.path import isfile, join
import re
import resource
import shutil
import signal
import stat
import subprocess
import sys
import tarfile
import tempfile
import time

def copytree(src, dst, symlinks=False, ignore=None):
    """ Custom copy tree to allow to copy into existing directories """
    for item in os.listdir(src):
        s = os.path.join(src, item)
        d = os.path.join(dst, item)
        if os.path.isdir(s):
            shutil.copytree(s, d, symlinks, ignore)
        else:
            shutil.copy2(s, d)

def setDirectoryRights(path):
    os.chmod(path, 0o777)
    os.chown(path, 4242, 4242)
    for root, dirs, files in os.walk(path):  
        for d in dirs:
            os.chmod(os.path.join(root, d), 0o777)
            os.chown(os.path.join(root, d), 4242, 4242)
        for f in files:
            os.chmod(os.path.join(root, f), 0o777)
            os.chown(os.path.join(root, f), 4242, 4242)
            
def setlimits():
    os.setgid(4242)
    os.setuid(4242)
    resource.setrlimit(resource.RLIMIT_CPU, (limits["time"], limits["time"]+5))
    resource.setrlimit(resource.RLIMIT_NPROC, (100, 100))
    
def setExecutable(filename):
    st = os.stat(filename)
    os.chmod(filename, st.st_mode | stat.S_IEXEC)

def executeProcess(filename,stdinString):
    setExecutable(filename)
    stdin = tempfile.TemporaryFile()
    stdin.write(stdinString)
    stdin.seek(0)
    
    stdout = tempfile.TemporaryFile()
    stderr = tempfile.TemporaryFile()
    p = subprocess.Popen([filename], preexec_fn=setlimits, stdin=stdin, stdout=stdout, stderr=stderr)
    start = time.time()
    while p.poll() is None:
        time.sleep(0.2)
        if time.time()-start > limits["time"]*2:
            p.kill()
            raise Exception("Timeout")
    stdout.seek(0)
    stderr.seek(0)
    
    status = p.returncode-128
    if status == signal.SIGXCPU:
        raise Exception("Timeout")
    
    return stdout.read(), stderr.read()

def b64tarfile(source_dir):
    encoded_string = ''
    
    with tarfile.open('/.__output/archive.tgz', "w:gz") as tar:
        tar.add(source_dir, arcname='/')
        
    with open('/.__output/archive.tgz', "rb") as tar:
        encoded_string = base64.b64encode(tar.read())
        
    return encoded_string

# Get input data
stdin = sys.stdin.read().strip('\0').strip()
data = json.loads(stdin)
input_data = data["input"]
limits = data["limits"]

# Determining if debug mode or not
debug = True if sys.argv[1:] and sys.argv[1] == '--debug' else False

# Create tests directory
os.mkdir('/.__tests')

# Create output directory
os.mkdir("/.__output")

#Copy /ro/task (which is read-only) in /task. Everything will be executed there
shutil.copytree("/ro/task","/task")

#Set rights on some files
setDirectoryRights("/tmp")
setDirectoryRights("/task")
setDirectoryRights("/.__tests")
setDirectoryRights("/.__output")

#Launch everything
if os.path.exists("/task/run"):
    os.chdir("/task")
    try:
        stdout, stderr = executeProcess("/task/run", input_data['student_response']+'\n')
    except:
        result={"result":"timeout","text":"'/task/run' did a timeout","problems":{}}
        if debug:
            result['stdout'] = stdout
            result['stderr'] = stderr
        print json.dumps(result)
        exit()
else:
    result = {"result":"crash","text":"'/task/run' couldn't be found","problems":{}}
    if debug:
        result['stdout'] = stdout
        result['stderr'] = stderr
    print json.dumps(result)
    exit()

# Copy required files in output folder
for filepath in ['/tmp/work/new_file.oz', '/tmp/work/new_file.ozf', '/tmp/work/errC.txt', '/tmp/work/out.txt', '/tmp/work/out.txt']:
    if os.path.exists(filepath):
        shutil.copy(filepath, '/.__output')

# Produce feedback
stdout = "["+re.sub('\} *\n* *\{','},{',stdout)+"]"
tests_results = inginious.tests.get_tests_results()
try:
	feedback = json.loads(stdout)
except:
	print json.dumps({"result":"crash", "text":"Unable to read feedback: " + stdout, "problems":{}})
	exit()
if not feedback:
    print json.dumps({"result":"crash", "text":"No feedback was given !", "problems":{}})
    exit()
else:
    output = {"result":'success','text':'','archive':b64tarfile('/.__output'),'problems':{}}
    if debug:
        output['stdout'] = stdout
        output['stderr'] = stderr
        output['tests'] = tests_results
    for f in feedback:
        if not f['correct']:
            output['result'] = 'failed'
        if f['msg'] != "":
            if output['text'] != "":
                output['text'] += "<br/>"
            output['text'] += f['msg']
    print json.dumps(output)
